#!/bin/bash

# Script to generate every A2 that are isomorphic to the recorded A2s, verify that the recorded A2s are nonisomorphic from each other, and then generate a SAT instance which blocks every possible A2.  Finally, the script verifies that this instance is unsatisfiable showing that no A2s were missed.

# Create directories to hold instances and output
mkdir -p cnf
mkdir -p out
mkdir -p log

if [ -z $1 ]
then
	echo "Need case # of A2s to generate"
	exit
fi

case=$1

# Generate base SAT instance
command="python ../satgen_a2.py $case > cnf/$case.cnf"
echo $command
eval $command

# Ensure that A2s up to isomorphism are already generated
if [ ! -f ../a2s/$case.complete ]
then
	echo "Need to enumerate A2s up to isomorphism first"
	exit
fi

# Compile MapleSAT and GRATgen
if [ ! -f maplesat_static ] || [ ! -f gratgen ]
then
	./compile.sh
fi

# Number of recorded A2s
numa2s=`wc -l ../a2s/$case.complete | cut -d' ' -f1`

# Generate all the A2s that are isomorphic to the recorded A2s; these A2s are known as the 'rejected' A2s
echo "Applying all A1 symmetries to all $numa2s A2s..."
./maplesat_static cnf/$case.cnf -assumptions=../a2s/$case.complete -recorded=out/$case.recorded -rejected=out/$case.rejected -caseno=$case -verb=0 > log/$case.noniso-generate.log

# Generate SAT instance that blocks all rejected A2s
LEN1=`cat cnf/$case.cnf | wc -l`
LEN2=`cat out/$case.rejected | wc -l`
VARS=`head cnf/$case.cnf -n 1 | cut -d' ' -f3`
echo "p cnf $VARS $((LEN1+LEN2-1))" > cnf/$case.block.cnf
tail cnf/$case.cnf -n +2 >> cnf/$case.block.cnf
cat out/$case.rejected >> cnf/$case.block.cnf

# Verify that each recorded A2 is not isomorphic to any other recorded A2
command="./maplesat_static -no-pre cnf/$case.block.cnf -assumptions=../a2s/$case.complete -verb=0 > log/$case.noniso-verify.log"
echo $command
eval $command

if [ -s ../a2s/$case.complete ]
then
	t=`grep "CPU time" log/$case.noniso-verify.log | xargs | cut -d' ' -f4`
	satbounds=`grep "Number of satisfiable bounds" log/$case.noniso-verify.log | cut -d' ' -f5`
	rm log/$case.driver 2> /dev/null
	if [ $satbounds -eq $numa2s ]
	then
		numrejected=`wc -l out/$case.rejected | cut -d' ' -f1`
		echo "Verified in $t seconds that each of the $satbounds recorded A2s are not isomorphic to any of the $numrejected A2s generated by applying nontrivial A1 symmetries." | tee -a log/$case.driver
	else
		echo "ERROR: $satbounds/$numa2s solutions validated in $t sec" | tee -a log/$case.driver
		exit
	fi
else
	echo "No solutions to validate" | tee -a log/$case.driver
fi

# Generate a SAT instance that blocks every A2, both recorded and rejected
VARS=`head -n 1 cnf/$case.block.cnf | cut -d' ' -f3`
LEN1=`cat cnf/$case.block.cnf | wc -l`
LEN2=`cat out/$case.recorded | wc -l`

echo "p cnf $VARS $((LEN1+LEN2-1))" > cnf/$case.allblock.cnf
tail cnf/$case.block.cnf -n +2 >> cnf/$case.allblock.cnf
sed -e 's/ / -/g' -e 's/-0/0/g' -e 's/a //g' out/$case.recorded >> cnf/$case.allblock.cnf

# Verify instance that blocks all the A2s is unsatisfiable
command="./maplesat_static -no-pre cnf/$case.allblock.cnf out/$case.allblock.proof | tee log/$case.allblock.log"
echo $command
eval $command

# Verify proof that the instance that blocks all the A2s is unsatisfiable
command="./gratgen cnf/$case.allblock.cnf out/$case.allblock.proof 2> log/$case.allblock.check"
echo $command
eval $command

grep "VERIFIED" log/$case.allblock.check
